% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/aes.r
\name{aes_q}
\alias{aes_q}
\alias{aes_string}
\title{Define aesthetic mappings from strings, or quoted calls and formulas.}
\usage{
aes_q(x, y, ...)

aes_string(x, y, ...)
}
\arguments{
\item{x,y,...}{List of name value pairs. Elements must be either
quoted calls, strings, one-sided formulas or constants.}
}
\description{
Aesthetic mappings describe how variables in the data are mapped to visual
properties (aesthetics) of geoms. \code{\link{aes}} uses non-standard
evaluation to capture the variable names. \code{aes_q} and \code{aes_string}
require you to explicitly quote the inputs either with \code{""} for
\code{aes_string()}, or with \code{quote} or \code{~} for \code{aes_q()}.
}
\details{
It's better to use \code{aes_q()}, because there's no easy way to create the
equivalent to \code{aes(colour = "my colour")} or \code{aes{x = `X$1`}}
with \code{aes_string()}.

\code{aes_string} and \code{aes_q} are particularly useful when writing
functions that create plots because you can use strings or quoted
names/calls to define the aesthetic mappings, rather than having to use
\code{\link{substitute}} to generate a call to \code{aes()}.
}
\examples{
# Three ways of generating the same aesthetics
aes(mpg, wt, col = cyl)
aes_q(quote(mpg), quote(wt), col = quote(cyl))
aes_q(~mpg, ~wt, col = ~cyl)
aes_string("mpg", "wt", col = "cyl")

# You can't easily mimic these calls with aes_string
aes(`$100`, colour = "smooth")
aes_q(~ `$100`, colour = "smooth")
# Ok, you can, but it requires a _lot_ of quotes
aes_string("`$100`", colour = '"smooth"')

# Convert strings to names with as.name
var <- "cyl"
aes(col = x)
aes_q(col = as.name(var))
}
\seealso{
\code{\link{aes}}
}

